// --------------------- FileHeader --------------------------
	// All file header info is kept as is (unless offset/size attributes)
	// The original header flags is not complete, thus discarded. 
	// 	.headerflags	@"EF_CUDA_TEXMODE_UNIFIED EF_CUDA_64BIT_ADDRESS EF_CUDA_SM80 EF_CUDA_VIRTUAL_SM(EF_CUDA_SM80)"
	// 	.elftype	@"ET_EXEC"
	// 
	// 
	.__elf_ident_osabi      51
	.__elf_ident_abiversion 7
	.__elf_type             ET_EXEC
	.__elf_machine          EM_CUDA
	.__elf_version          117 		// CUDA toolkit version 
	.__elf_entry            0 		// entry point address 
	.__elf_phoff            0x0 		// program header offset, maybe updated by assembler
	.__elf_shoff            0x880 		// section header offset, maybe updated by assembler
	.__elf_flags            0x500550 		// Flags, SM_80(0x50), COMPUTE_80(0x50) 
	.__elf_ehsize           64 		// elf header size 
	.__elf_phentsize        0 		// program entry size
	.__elf_phnum            0 		// number of program entries
	.__elf_shentsize        64 		// section entry size
	.__elf_shnum            11 		// number of sections, currently no sections can be appended/removed
	.__elf_shstrndx         1 		// Section name string table index 


  //-------------------------------------------------
  //------------ END of FileHeader ------------------
  //-------------------------------------------------



// ---------------------                                  --------------------------
	// there will always be an empty section at index 0
	.section  "", 0, SHT_NULL
	.__section_name         0x0 	// offset in .shstrtab
	.__section_type         SHT_NULL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x0 	// maybe updated by assembler
	.__section_size         0x0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                0 	// equivalent to set sh_addralign

// --------------------- .shstrtab                        --------------------------
	.section  ".shstrtab", 0, SHT_STRTAB
	// all strings in .shstrtab section will be kept as is.
	.__section_name         0x1 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x40 	// maybe updated by assembler
	.__section_size         0xd9 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .shstrtab[0] = b'\x00' 
    /*0000*/ .byte 0x00

    // .shstrtab[1] = b'.shstrtab\x00' 
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .shstrtab[2] = b'.strtab\x00' 
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[3] = b'.symtab\x00' 
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .shstrtab[4] = b'.symtab_shndx\x00' 
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .shstrtab[5] = b'.nv.info\x00' 
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0031*/ .byte 0x00

    // .shstrtab[6] = b'.text._Z3addPKfS0_Pfi\x00' 
    /*0032*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*003a*/ .byte 0x33, 0x61, 0x64, 0x64, 0x50, 0x4b, 0x66, 0x53
    /*0042*/ .byte 0x30, 0x5f, 0x50, 0x66, 0x69, 0x00

    // .shstrtab[7] = b'.nv.info._Z3addPKfS0_Pfi\x00' 
    /*0048*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0050*/ .byte 0x2e, 0x5f, 0x5a, 0x33, 0x61, 0x64, 0x64, 0x50
    /*0058*/ .byte 0x4b, 0x66, 0x53, 0x30, 0x5f, 0x50, 0x66, 0x69
    /*0060*/ .byte 0x00

    // .shstrtab[8] = b'.nv.shared._Z3addPKfS0_Pfi\x00' 
    /*0061*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*0069*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x33, 0x61, 0x64
    /*0071*/ .byte 0x64, 0x50, 0x4b, 0x66, 0x53, 0x30, 0x5f, 0x50
    /*0079*/ .byte 0x66, 0x69, 0x00

    // .shstrtab[9] = b'.nv.constant0._Z3addPKfS0_Pfi\x00' 
    /*007c*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*0084*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*008c*/ .byte 0x33, 0x61, 0x64, 0x64, 0x50, 0x4b, 0x66, 0x53
    /*0094*/ .byte 0x30, 0x5f, 0x50, 0x66, 0x69, 0x00

    // .shstrtab[10] = b'.debug_frame\x00' 
    /*009a*/ .byte 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66
    /*00a2*/ .byte 0x72, 0x61, 0x6d, 0x65, 0x00

    // .shstrtab[11] = b'.rel.debug_frame\x00' 
    /*00a7*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62
    /*00af*/ .byte 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65
    /*00b7*/ .byte 0x00

    // .shstrtab[12] = b'.rela.debug_frame\x00' 
    /*00b8*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e, 0x64, 0x65
    /*00c0*/ .byte 0x62, 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d
    /*00c8*/ .byte 0x65, 0x00

    // .shstrtab[13] = b'.nv.rel.action\x00' 
    /*00ca*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x72, 0x65, 0x6c, 0x2e
    /*00d2*/ .byte 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x00


// --------------------- .strtab                          --------------------------
	.section  ".strtab", 0, SHT_STRTAB
	// all strings in .strtab section will be kept as is.
	.__section_name         0xb 	// offset in .shstrtab
	.__section_type         SHT_STRTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x119 	// maybe updated by assembler
	.__section_size         0xf0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
    // .strtab[0] = b'\x00' 
    /*0000*/ .byte 0x00

    // .strtab[1] = b'.shstrtab\x00' 
    /*0001*/ .byte 0x2e, 0x73, 0x68, 0x73, 0x74, 0x72, 0x74, 0x61
    /*0009*/ .byte 0x62, 0x00

    // .strtab[2] = b'.strtab\x00' 
    /*000b*/ .byte 0x2e, 0x73, 0x74, 0x72, 0x74, 0x61, 0x62, 0x00

    // .strtab[3] = b'.symtab\x00' 
    /*0013*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x00

    // .strtab[4] = b'.symtab_shndx\x00' 
    /*001b*/ .byte 0x2e, 0x73, 0x79, 0x6d, 0x74, 0x61, 0x62, 0x5f
    /*0023*/ .byte 0x73, 0x68, 0x6e, 0x64, 0x78, 0x00

    // .strtab[5] = b'.nv.info\x00' 
    /*0029*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0031*/ .byte 0x00

    // .strtab[6] = b'_Z3addPKfS0_Pfi\x00' 
    /*0032*/ .byte 0x5f, 0x5a, 0x33, 0x61, 0x64, 0x64, 0x50, 0x4b
    /*003a*/ .byte 0x66, 0x53, 0x30, 0x5f, 0x50, 0x66, 0x69, 0x00

    // .strtab[7] = b'.text._Z3addPKfS0_Pfi\x00' 
    /*0042*/ .byte 0x2e, 0x74, 0x65, 0x78, 0x74, 0x2e, 0x5f, 0x5a
    /*004a*/ .byte 0x33, 0x61, 0x64, 0x64, 0x50, 0x4b, 0x66, 0x53
    /*0052*/ .byte 0x30, 0x5f, 0x50, 0x66, 0x69, 0x00

    // .strtab[8] = b'.nv.info._Z3addPKfS0_Pfi\x00' 
    /*0058*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x69, 0x6e, 0x66, 0x6f
    /*0060*/ .byte 0x2e, 0x5f, 0x5a, 0x33, 0x61, 0x64, 0x64, 0x50
    /*0068*/ .byte 0x4b, 0x66, 0x53, 0x30, 0x5f, 0x50, 0x66, 0x69
    /*0070*/ .byte 0x00

    // .strtab[9] = b'.nv.shared._Z3addPKfS0_Pfi\x00' 
    /*0071*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x73, 0x68, 0x61, 0x72
    /*0079*/ .byte 0x65, 0x64, 0x2e, 0x5f, 0x5a, 0x33, 0x61, 0x64
    /*0081*/ .byte 0x64, 0x50, 0x4b, 0x66, 0x53, 0x30, 0x5f, 0x50
    /*0089*/ .byte 0x66, 0x69, 0x00

    // .strtab[10] = b'.nv.constant0._Z3addPKfS0_Pfi\x00' 
    /*008c*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x63, 0x6f, 0x6e, 0x73
    /*0094*/ .byte 0x74, 0x61, 0x6e, 0x74, 0x30, 0x2e, 0x5f, 0x5a
    /*009c*/ .byte 0x33, 0x61, 0x64, 0x64, 0x50, 0x4b, 0x66, 0x53
    /*00a4*/ .byte 0x30, 0x5f, 0x50, 0x66, 0x69, 0x00

    // .strtab[11] = b'_param\x00' 
    /*00aa*/ .byte 0x5f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x00

    // .strtab[12] = b'.debug_frame\x00' 
    /*00b1*/ .byte 0x2e, 0x64, 0x65, 0x62, 0x75, 0x67, 0x5f, 0x66
    /*00b9*/ .byte 0x72, 0x61, 0x6d, 0x65, 0x00

    // .strtab[13] = b'.rel.debug_frame\x00' 
    /*00be*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x2e, 0x64, 0x65, 0x62
    /*00c6*/ .byte 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d, 0x65
    /*00ce*/ .byte 0x00

    // .strtab[14] = b'.rela.debug_frame\x00' 
    /*00cf*/ .byte 0x2e, 0x72, 0x65, 0x6c, 0x61, 0x2e, 0x64, 0x65
    /*00d7*/ .byte 0x62, 0x75, 0x67, 0x5f, 0x66, 0x72, 0x61, 0x6d
    /*00df*/ .byte 0x65, 0x00

    // .strtab[15] = b'.nv.rel.action\x00' 
    /*00e1*/ .byte 0x2e, 0x6e, 0x76, 0x2e, 0x72, 0x65, 0x6c, 0x2e
    /*00e9*/ .byte 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x00


// --------------------- .symtab                          --------------------------
	.section  ".symtab", 0, SHT_SYMTAB
	// all symbols in .symtab sections will be kept
	// but the symbol size may be changed accordingly
	.__section_name         0x13 	// offset in .shstrtab
	.__section_type         SHT_SYMTAB
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x210 	// maybe updated by assembler
	.__section_size         0x90 	// maybe updated by assembler
	.__section_link         2
	.__section_info         0x5
	.__section_entsize      24
	.align                8 	// equivalent to set sh_addralign
    // Symbol[0] "": Container({'st_name': 0, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_NOTYPE'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 'SHN_UNDEF', 'st_value': 0, 'st_size': 0})
    /*0000*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0008*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0010*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[1] ".text._Z3addPKfS0_Pfi": Container({'st_name': 66, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 10, 'st_value': 0, 'st_size': 0})
    /*0018*/ .byte 0x42, 0x00, 0x00, 0x00, 0x03, 0x00, 0x0a, 0x00
    /*0020*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0028*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[2] ".nv.constant0._Z3addPKfS0_Pfi": Container({'st_name': 140, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 9, 'st_value': 0, 'st_size': 0})
    /*0030*/ .byte 0x8c, 0x00, 0x00, 0x00, 0x03, 0x00, 0x09, 0x00
    /*0038*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0040*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[3] ".debug_frame": Container({'st_name': 177, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 4, 'st_value': 0, 'st_size': 0})
    /*0048*/ .byte 0xb1, 0x00, 0x00, 0x00, 0x03, 0x00, 0x04, 0x00
    /*0050*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0058*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[4] ".nv.rel.action": Container({'st_name': 225, 'st_info': Container({'bind': 'STB_LOCAL', 'type': 'STT_SECTION'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 7, 'st_value': 0, 'st_size': 0})
    /*0060*/ .byte 0xe1, 0x00, 0x00, 0x00, 0x03, 0x00, 0x07, 0x00
    /*0068*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0070*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00

    // Symbol[5] "_Z3addPKfS0_Pfi": Container({'st_name': 50, 'st_info': Container({'bind': 'STB_GLOBAL', 'type': 'STT_FUNC'}), 'st_other': Container({'local': 0, 'visibility': 'STV_DEFAULT'}), 'st_shndx': 10, 'st_value': 0, 'st_size': 512})
    /*0078*/ .byte 0x32, 0x00, 0x00, 0x00, 0x12, 0x10, 0x0a, 0x00
    /*0080*/ .byte 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
    /*0088*/ .byte 0x00, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00


// --------------------- .debug_frame                     --------------------------
	.section	.debug_frame,"",@progbits
	.__section_name         0x9a 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x2a0 	// maybe updated by assembler
	.__section_size         0x70 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      0
	.align                1 	// equivalent to set sh_addralign
  .debug_frame:
          /*0000*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x28, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff
          /*0010*/ 	.byte	0xff, 0xff, 0xff, 0xff, 0x03, 0x00, 0x04, 0x7c, 0xff, 0xff, 0xff, 0xff, 0x0f, 0x0c, 0x81, 0x80
          /*0020*/ 	.byte	0x80, 0x28, 0x00, 0x08, 0xff, 0x81, 0x80, 0x28, 0x08, 0x81, 0x80, 0x80, 0x28, 0x00, 0x00, 0x00
          /*0030*/ 	.byte	0x00, 0x00, 0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*0040*/ 	.byte	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
          /*0048*/ 	.dword	_Z3addPKfS0_Pfi
          /*0050*/ 	.byte	0xf0, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x04, 0x04, 0x00, 0x00, 0x00, 0x04, 0x14, 0x00
          /*0060*/ 	.byte	0x00, 0x00, 0x0c, 0x81, 0x80, 0x80, 0x28, 0x00, 0x04, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  
  
// --------------------- .nv.info                         --------------------------
	.section	.nv.info,"",@"SHT_CUDA_INFO"
	.__section_name         0x29 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x310 	// maybe updated by assembler
	.__section_size         0x30 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0x0
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_REGCOUNT
  	.align		4
          /*0000*/ 	.byte	0x04, 0x2f
          /*0002*/ 	.short	(.L_2 - .L_1)
  	.align		4
  .L_1:
          /*0004*/ 	.word	index@(_Z3addPKfS0_Pfi)
          /*0008*/ 	.word	0x0000000c
  
  
  	//----- nvinfo : EIATTR_MAX_STACK_SIZE
  	.align		4
  .L_2:
          /*000c*/ 	.byte	0x04, 0x23
          /*000e*/ 	.short	(.L_4 - .L_3)
  	.align		4
  .L_3:
          /*0010*/ 	.word	index@(_Z3addPKfS0_Pfi)
          /*0014*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_MIN_STACK_SIZE
  	.align		4
  .L_4:
          /*0018*/ 	.byte	0x04, 0x12
          /*001a*/ 	.short	(.L_6 - .L_5)
  	.align		4
  .L_5:
          /*001c*/ 	.word	index@(_Z3addPKfS0_Pfi)
          /*0020*/ 	.word	0x00000000
  
  
  	//----- nvinfo : EIATTR_FRAME_SIZE
  	.align		4
  .L_6:
          /*0024*/ 	.byte	0x04, 0x11
          /*0026*/ 	.short	(.L_8 - .L_7)
  	.align		4
  .L_7:
          /*0028*/ 	.word	index@(_Z3addPKfS0_Pfi)
          /*002c*/ 	.word	0x00000000
  .L_8:
  
  
// --------------------- .nv.info._Z3addPKfS0_Pfi         --------------------------
	.section	.nv.info._Z3addPKfS0_Pfi,"",@"SHT_CUDA_INFO"
	.__section_name         0x48 	// offset in .shstrtab
	.__section_type         1879048192
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x340 	// maybe updated by assembler
	.__section_size         0x6c 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0xa
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  
  
  	//----- nvinfo : EIATTR_CUDA_API_VERSION
  	.align		4
          /*0000*/ 	.byte	0x04, 0x37
          /*0002*/ 	.short	(.L_10 - .L_9)
  .L_9:
          /*0004*/ 	.word	0x00000075
  
  
  	//----- nvinfo : EIATTR_SW2861232_WAR
  	.align		4
  .L_10:
          /*0008*/ 	.byte	0x01, 0x35
  	.zero		2
  
  
  	//----- nvinfo : EIATTR_PARAM_CBANK
  	.align		4
          /*000c*/ 	.byte	0x04, 0x0a
          /*000e*/ 	.short	(.L_12 - .L_11)
  	.align		4
  .L_11:
          /*0010*/ 	.word	index@(.nv.constant0._Z3addPKfS0_Pfi)
          /*0014*/ 	.short	0x0160
          /*0016*/ 	.short	0x001c
  
  
  	//----- nvinfo : EIATTR_CBANK_PARAM_SIZE
  	.align		4
  .L_12:
          /*0018*/ 	.byte	0x03, 0x19
          /*001a*/ 	.short	0x001c
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
          /*001c*/ 	.byte	0x04, 0x17
          /*001e*/ 	.short	(.L_14 - .L_13)
  .L_13:
          /*0020*/ 	.word	0x00000000
          /*0024*/ 	.short	0x0003
          /*0026*/ 	.short	0x0018
          /*0028*/ 	.byte	0x00, 0xf0, 0x11, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_14:
          /*002c*/ 	.byte	0x04, 0x17
          /*002e*/ 	.short	(.L_16 - .L_15)
  .L_15:
          /*0030*/ 	.word	0x00000000
          /*0034*/ 	.short	0x0002
          /*0036*/ 	.short	0x0010
          /*0038*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_16:
          /*003c*/ 	.byte	0x04, 0x17
          /*003e*/ 	.short	(.L_18 - .L_17)
  .L_17:
          /*0040*/ 	.word	0x00000000
          /*0044*/ 	.short	0x0001
          /*0046*/ 	.short	0x0008
          /*0048*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_KPARAM_INFO
  	.align		4
  .L_18:
          /*004c*/ 	.byte	0x04, 0x17
          /*004e*/ 	.short	(.L_20 - .L_19)
  .L_19:
          /*0050*/ 	.word	0x00000000
          /*0054*/ 	.short	0x0000
          /*0056*/ 	.short	0x0000
          /*0058*/ 	.byte	0x00, 0xf0, 0x21, 0x00
  
  
  	//----- nvinfo : EIATTR_MAXREG_COUNT
  	.align		4
  .L_20:
          /*005c*/ 	.byte	0x03, 0x1b
          /*005e*/ 	.short	0x00ff
  
  
  	//----- nvinfo : EIATTR_EXIT_INSTR_OFFSETS
  	.align		4
          /*0060*/ 	.byte	0x04, 0x1c
          /*0062*/ 	.short	(.L_22 - .L_21)
  
  
  	//   ....[0]....
  .L_21:
          /*0064*/ 	.word	0x00000050
  
  
  	//   ....[1]....
          /*0068*/ 	.word	0x000000f0
  .L_22:
  
  
// --------------------- .nv.rel.action                   --------------------------
	.section	.nv.rel.action,"",@"SHT_CUDA_RELOCINFO"
	.__section_name         0xca 	// offset in .shstrtab
	.__section_type         1879048203
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x3b0 	// maybe updated by assembler
	.__section_size         0xe0 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0x0
	.__section_entsize      8
	.align                8 	// equivalent to set sh_addralign
  	.align	8
  	.sectionentsize	8
          /*0000*/ 	.byte	0x4b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x08, 0x10, 0x0a, 0x2f, 0x22
          /*0010*/ 	.byte	0x00, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0020*/ 	.byte	0x00, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0030*/ 	.byte	0x00, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x28, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0040*/ 	.byte	0x00, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0050*/ 	.byte	0x01, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0060*/ 	.byte	0x01, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0070*/ 	.byte	0x01, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x28, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0080*/ 	.byte	0x01, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00
          /*0090*/ 	.byte	0x02, 0x00, 0x00, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x08, 0x08, 0x00, 0x00, 0x00, 0x00
          /*00a0*/ 	.byte	0x02, 0x00, 0x10, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x18, 0x08, 0x00, 0x00, 0x00, 0x00
          /*00b0*/ 	.byte	0x02, 0x00, 0x20, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x28, 0x08, 0x00, 0x00, 0x00, 0x00
          /*00c0*/ 	.byte	0x02, 0x00, 0x30, 0x08, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x38, 0x08, 0x00, 0x00, 0x00, 0x00
          /*00d0*/ 	.byte	0x00, 0x00, 0x00, 0x14, 0x2c, 0x00, 0x00, 0x00, 0x09, 0x00, 0x00, 0x0c, 0x00, 0x00, 0x00, 0x00
  
  
// --------------------- .rel.debug_frame                 --------------------------
	.section  ".rel.debug_frame", 0, SHT_REL
	// all relocation sections will be dynamically generated by assembler 
	// but most of the section header will be kept as is.
	.__section_name         0xa7 	// offset in .shstrtab
	.__section_type         SHT_REL
	.__section_flags        0x0
	.__section_addr         0x0
	.__section_offset       0x490 	// maybe updated by assembler
	.__section_size         0x10 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0x4
	.__section_entsize      16
	.align                8 	// equivalent to set sh_addralign
    // Relocation[0] : _Z3addPKfS0_Pfi, Container({'r_offset': 72, 'r_info': 21474836482, 'r_info_sym': 5, 'r_info_type': 2})

// --------------------- .nv.constant0._Z3addPKfS0_Pfi    --------------------------
	.section	.nv.constant0._Z3addPKfS0_Pfi,"a",@progbits
	.__section_name         0x7c 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x2
	.__section_addr         0x0
	.__section_offset       0x4a0 	// maybe updated by assembler
	.__section_size         0x17c 	// maybe updated by assembler
	.__section_link         0
	.__section_info         0xa
	.__section_entsize      0
	.align                4 	// equivalent to set sh_addralign
  	.align	4
  .nv.constant0._Z3addPKfS0_Pfi:
  	.zero		380
  
  
// --------------------- .text._Z3addPKfS0_Pfi            --------------------------
	.section	.text._Z3addPKfS0_Pfi,"ax",@progbits
	.__section_name         0x32 	// offset in .shstrtab
	.__section_type         SHT_PROGBITS
	.__section_flags        0x6
	.__section_addr         0x0
	.__section_offset       0x680 	// maybe updated by assembler
	.__section_size         0x200 	// maybe updated by assembler
	.__section_link         3
	.__section_info         0xc000005
	.__section_entsize      0
	.align                128 	// equivalent to set sh_addralign
  	.sectioninfo	@"SHI_REGISTERS=12"
  	.align	128
          .global         _Z3addPKfS0_Pfi
          .type           _Z3addPKfS0_Pfi,@function
          .size           _Z3addPKfS0_Pfi,(.L_x_1 - _Z3addPKfS0_Pfi)
          .other          _Z3addPKfS0_Pfi,@"STO_CUDA_ENTRY STV_DEFAULT"
  _Z3addPKfS0_Pfi:
  .text._Z3addPKfS0_Pfi:
      [B------:R-:W-:Y:S02]         /*0000*/                   MOV R1, c[0x0][0x28] ;
      [B------:R-:W0:-:S04]         /*0010*/                   S2R R6, SR_CTAID.X ;
      [B------:R-:W0:-:S02]         /*0020*/                   S2R R3, SR_TID.X ;
      [B0-----:R-:W-:Y:S05]         /*0030*/                   IMAD R6, R6, c[0x0][0x0], R3 ;
      [B------:R-:W-:Y:S13]         /*0040*/                   ISETP.GT.AND P0, PT, R6, c[0x0][0x178], PT ;
      [B------:R-:W-:-:S05]         /*0050*/               @P0 EXIT ;
      [B------:R-:W-:-:S01]         /*0060*/                   HFMA2.MMA R7, -RZ, RZ, 0, 2.384185791015625e-07 ;
      [B------:R-:W-:Y:S09]         /*0070*/                   ULDC.64 UR4, c[0x0][0x118] ;
      [B------:R-:W-:Y:S04]         /*0080*/                   IMAD.WIDE R2, R6, R7, c[0x0][0x160] ;
      [B------:R-:W-:-:S02]         /*0090*/                   IMAD.WIDE R4, R6.reuse, R7.reuse, c[0x0][0x168] ;
      [B------:R-:W2:-:S04]         /*00a0*/                   LDG.E R3, desc[UR4][R2.64] ;
      [B------:R-:W2:-:S01]         /*00b0*/                   LDG.E R4, desc[UR4][R4.64] ;
      [B------:R-:W-:Y:S04]         /*00c0*/                   IMAD.WIDE R6, R6, R7, c[0x0][0x170] ;
      [B--2---:R-:W-:Y:S05]         /*00d0*/                   FADD R9, R4, R3 ;
      [B------:R-:W-:-:S01]         /*00e0*/                   STG.E desc[UR4][R6.64], R9 ;
      [B------:R-:W-:-:S05]         /*00f0*/                   EXIT ;
  .L_x_0:
      [B------:R-:W-:Y:S00]         /*0100*/                   BRA `(.L_x_0);
      [B------:R-:W-:Y:S00]         /*0110*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0120*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0130*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0140*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0150*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0160*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0170*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0180*/                   NOP;
      [B------:R-:W-:Y:S00]         /*0190*/                   NOP;
      [B------:R-:W-:Y:S00]         /*01a0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*01b0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*01c0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*01d0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*01e0*/                   NOP;
      [B------:R-:W-:Y:S00]         /*01f0*/                   NOP;
  .L_x_1:

  //-------------------------------------------------
  //---------------- END of sections ----------------
  //-------------------------------------------------



  //-------------------------------------------------
  //---------------- END of segments ----------------
  //-------------------------------------------------


